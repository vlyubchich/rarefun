% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rare_residuals.R
\name{rare_residuals}
\alias{rare_residuals}
\title{Detect Rare Events and Seasonality Shifts in Time Series Residuals}
\usage{
rare_residuals(
  X,
  seasonal = FALSE,
  method = "both",
  period = NULL,
  fourier_terms = 2,
  seasonality_shift = seasonal,
  stl_args = list(s.window = 7, robust = TRUE),
  iforest_args = list(),
  dbscan_args = list()
)
}
\arguments{
\item{X}{A numeric vector (time series values) or a data frame with columns
`time` (numeric or Date) and `value` (numeric). If a vector, assumes regular
time steps starting from 1.}

\item{seasonal}{Logical, indicating if the time series is seasonal (TRUE) or
non-seasonal (FALSE) (default: FALSE).}

\item{method}{Character, specifying the anomaly detection method: "iforest",
"dbscan", or "both" (default: "both").}

\item{period}{Numeric, the period of seasonality (e.g., 12 for monthly, 365.25
for daily) if `seasonal = TRUE`. If NULL, estimated using spectral analysis
(default: NULL).}

\item{fourier_terms}{Integer, number of Fourier term pairs for seasonal modeling
in Fourier smoothing (default: 2).}

\item{seasonality_shift}{Logical, whether to compute seasonality shift (e.g., early
spring) by comparing STL and Fourier seasonal components (default: TRUE if
`seasonal = TRUE`).}

\item{stl_args}{A named list of arguments passed to `stats::stl`.
Default: `list(s.window = 7, robust = TRUE)`.}

\item{iforest_args}{A named list of arguments passed to `rare_iforest` (e.g.,
`list(ntrees = 200)`). Default: `list()`.}

\item{dbscan_args}{A named list of arguments passed to `rare_dbscan` (e.g.,
`list(minPts = 10)`). Default: `list()`.}
}
\value{
A list containing:
  \itemize{
    \item \code{data}: A data frame with:
      \itemize{
        \item \code{time}: Input time points.
        \item \code{value}: Original time series values.
        \item \code{year}: Year extracted from time.
        \item \code{day}: Day of year (if `seasonal = TRUE` and time is Date).
        \item \code{residual}: Residuals from STL (seasonal) or LOESS (non-seasonal) smoothing.
        \item \code{residual_fourier}: Residuals from Fourier smoothing (if `seasonal = TRUE`).
        \item \code{is_anomaly_iforest}: Logical, anomalies from Isolation Forest (if applicable).
        \item \code{is_anomaly_dbscan}: Logical, anomalies from DBSCAN (if applicable).
        \item \code{score_iforest}: Anomaly scores from Isolation Forest.
        \item \code{score_dbscan}: Anomaly scores from DBSCAN.
      }
    \item \code{seasonality_shift}: A list (if `seasonality_shift = TRUE` and
      `seasonal = TRUE`) with:
      \itemize{
        \item \code{shift_days}: Estimated shift in days (positive if STL peaks
          earlier than Fourier, e.g., early spring).
        \item \code{stl_seasonal}: Seasonal component from STL.
        \item \code{fourier_seasonal}: Seasonal component from Fourier.
      }
  }
}
\description{
This function filters a time series to compute residuals using STL decomposition
(for seasonal data) or LOESS smoothing (for non-seasonal data) and identifies
rare events (anomalies) in the residuals using Isolation Forest or DBSCAN. For
seasonal time series, it applies STL decomposition and full-length Fourier
smoothing separately, comparing their seasonality estimates to detect shifts
(e.g., early spring) by analyzing differences in seasonal peaks.
}
\details{
For non-seasonal data, residuals are computed using LOESS with `year` as the
predictor. For seasonal data, residuals are computed twice: (1) using STL
decomposition to extract the remainder component, and (2) using a full-length
Fourier series to capture fixed periodicity. The STL seasonal component is
smoothed using the `s.window` parameter (numeric for flexible smoothing, "periodic"
for fixed seasonality) and further smoothed with LOESS for shift detection.
Seasonality shifts are detected by comparing smoothed STL and Fourier seasonal
components via cross-correlation to estimate the lag (in days) where peaks differ
(e.g., early spring). Rare events are detected in STL (or LOESS for non-seasonal)
residuals using `rare_iforest` or `rare_dbscan`. The period is estimated via
spectral analysis if not provided. Input validation prevents coercion errors.
Separate argument lists (`stl_args`, `iforest_args`, `dbscan_args`) ensure
function-specific parameters are passed correctly.
}
\examples{
\dontrun{
# Seasonal time series with Date index
set.seed(123)
dates <- seq(as.Date("2020-01-01"), by = "day", length.out = 1500)
value <- sin(2 * pi * seq_along(dates) / 365.25) + rnorm(1500, 0, 0.2)
X <- data.frame(time = dates, value = value)
result <- rare_residuals(X, seasonal = TRUE, period = 365.25, method = "both",
iforest_args = list(ntrees = 100))
plot(result$data$time, result$data$value, type = "l", main = "Time Series")
points(result$data$time[result$data$is_anomaly_iforest],
       result$data$value[result$data$is_anomaly_iforest], col = "red", pch = 19)
cat("Seasonality shift (days):", result$seasonality_shift$shift_days, "\n")

# Plot seasonal components
plot(result$data$time, result$seasonality_shift$stl_seasonal, type = "l",
     col = "blue", main = "Seasonal Components")
lines(result$data$time, result$seasonality_shift$fourier_seasonal, col = "red")
legend("topright", c("STL", "Fourier"), col = c("blue", "red"), lty = 1)

# Classic data example
result <- rare_residuals(as.vector(AirPassengers), seasonal = TRUE, period = 12,
method = "both", iforest_args = list(ntrees = 100))
plot(result$data$time, result$data$value, type = "l", main = "Time Series")
points(result$data$time[result$data$is_anomaly_iforest],
       result$data$value[result$data$is_anomaly_iforest], col = "red", pch = 19)
cat("Seasonality shift (days):", result$seasonality_shift$shift_days, "\n")

# Plot seasonal components
library(ggplot2)
seasonal_data <- data.frame(
  time = result$data$time,
  STL = result$seasonality_shift$stl_seasonal,
  Fourier = result$seasonality_shift$fourier_seasonal
)
ggplot(seasonal_data, aes(x = time)) +
  geom_line(aes(y = STL, color = "STL"), linewidth = 1) +
  geom_line(aes(y = Fourier, color = "Fourier"), linewidth = 1) +
  ggtitle("Seasonal Components") +
  scale_color_manual(values = c("STL" = "blue", "Fourier" = "red")) +
  theme_light() + theme(legend.title = element_blank())

}
}
