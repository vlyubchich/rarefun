% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_spatial_points.R
\name{match_spatial_points}
\alias{match_spatial_points}
\title{Match Spatial Points between Two Datasets}
\usage{
match_spatial_points(A, B, max_dist = Inf, fast = TRUE, ...)
}
\arguments{
\item{A}{A data frame containing the first set of points with columns `id`
(character or numeric identifier), `lat` (latitude in degrees, -90 to 90), and
`lon` (longitude in degrees, -180 to 180).}

\item{B}{A data frame containing the second set of points with columns `id`
(character or numeric identifier), `lat` (latitude in degrees, -90 to 90), and
`lon` (longitude in degrees, -180 to 180).}

\item{max_dist}{Numeric, the maximum geodesic distance (in meters) for a valid
match. Points with distances exceeding this threshold are assigned `NA` in the
output. Default is `Inf` (no threshold).}

\item{fast}{Logical, indicating whether to use fast Euclidean distance-based
matching (`TRUE`, default) via `RANN::nn2` or slower geodesic distance-based
matching (`FALSE`) via `geosphere::distGeo`. Regardless of the method, final
distances are computed as geodesic distances.}

\item{...}{Additional arguments passed to `RANN::nn2` (if `fast = TRUE`).}
}
\value{
A data frame with one row per point in `A`, containing the following columns:
  \itemize{
    \item \code{id_A}: Identifier of the point from `A`.
    \item \code{lat_A}: Latitude of the point from `A`.
    \item \code{lon_A}: Longitude of the point from `A`.
    \item \code{id_B}: Identifier of the nearest point from `B` (or `NA` if no match within `max_dist`).
    \item \code{lat_B}: Latitude of the nearest point from `B` (or `NA`).
    \item \code{lon_B}: Longitude of the nearest point from `B` (or `NA`).
    \item \code{distance_m}: Geodesic distance (in meters) to the nearest point in `B` (or `NA` if no match).
  }
  Column names are dynamically prefixed with the names of the input data frames
  (e.g., `id_Aa` if `A` is named `Aa`).
}
\description{
Matches each point in the first dataset (`A`) to the nearest point in the second
dataset (`B`) based on spatial coordinates (latitude and longitude). The function
supports both fast Euclidean distance-based matching (using `RANN::nn2`) and
slower, more accurate geodesic distance-based matching (using `geosphere::distGeo`).
Geodesic distances are always reported in the output, regardless of the matching
method. An optional maximum distance threshold can be applied to filter matches.
}
\details{
The function matches each point in `A` to the nearest point in `B` based on spatial
coordinates. If `fast = TRUE`, it uses Euclidean distances for matching (faster but
less accurate for large distances) via `RANN::nn2`. If `fast = FALSE`, it computes
geodesic distances for matching using `geosphere::distGeo`, which is more accurate
but slower. In both cases, the reported `distance_m` is the geodesic distance.
If `max_dist` is specified, matches exceeding this distance are replaced with `NA`.
The function handles empty inputs by returning an empty data frame with appropriate
column names.
}
\examples{
\dontrun{
# Example datasets
Aa <- data.frame(
  id = c("fish1", "fish2", "fish3"),
  lat = c(40.7128, 40.7228, 40.7328),
  lon = c(-74.0060, -74.0160, -74.0260)
)
Bb <- data.frame(
  id = c("grid1", "grid2"),
  lat = c(40.7000, 40.7500),
  lon = c(-74.0000, -74.0200)
)

# Fast matching (Euclidean-based)
match_spatial_points(Aa, Bb, fast = TRUE)

# Accurate matching (geodesic-based)
match_spatial_points(Aa, Bb, fast = FALSE)

# Apply maximum distance threshold
match_spatial_points(Aa, Bb, max_dist = 2000)
}

}
