% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rare_dbscan.R
\name{rare_dbscan}
\alias{rare_dbscan}
\title{Detect Rare Events Using DBSCAN}
\usage{
rare_dbscan(x, eps = NULL, minPts = NULL, scale = TRUE, ...)
}
\arguments{
\item{x}{A numeric matrix or data frame with no missing values. Rows are
observations, and columns are features.}

\item{eps}{Numeric, the maximum distance between two points for them to be
considered in the same neighborhood (default: estimated using k-nearest neighbors).}

\item{minPts}{Integer, the minimum number of points required to form a dense
region (default: 5).}

\item{scale}{Logical, whether to scale the data to have mean 0 and standard
deviation 1 before clustering (default: TRUE).}

\item{...}{Additional arguments passed to `dbscan::dbscan`.}
}
\value{
A list containing:
  \itemize{
    \item \code{scores}: Numeric vector of approximate anomaly scores (inverse of
      k-nearest neighbor distances, normalized; higher values indicate more likely
      anomalies).
    \item \code{is_anomaly}: Logical vector indicating whether each observation is
      a rare event (TRUE for noise points, cluster label 0).
    \item \code{cluster}: Integer vector of cluster assignments (0 for noise, 1+ for clusters).
    \item \code{model}: The fitted DBSCAN model object.
  }
}
\description{
This function applies the DBSCAN (Density-Based Spatial Clustering of Applications
with Noise) algorithm to identify rare events (anomalies) in a dataset using the
`dbscan` package. Points assigned to the noise cluster (label 0) are considered
rare events. The function computes cluster assignments and returns anomaly labels
and scores based on the DBSCAN model.
}
\details{
DBSCAN identifies clusters based on density, labeling points that do not belong to
any dense cluster as noise (cluster 0), which are treated as rare events. If `eps`
is not specified, it is estimated as the 90th percentile of the k-nearest neighbor
distances (where k = `minPts - 1`). Scaling is recommended to ensure features contribute
equally to distance calculations. The `scores` are approximate, based on inverse
k-nearest neighbor distances, and should be interpreted cautiously.
}
\examples{
\dontrun{
set.seed(123)
data <- matrix(rnorm(1000), nrow = 500)
data[1:5, ] <- data[1:5, ] + 10  # Add some outliers
result <- rare_dbscan(data)
table(result$is_anomaly)
plot(data, col = ifelse(result$is_anomaly, "red", "blue"), pch = 19)

result <- rare_dbscan(iris[, 1:4], minPts = 20)
table(result$is_anomaly)

result <- rare_dbscan(swiss)
table(result$is_anomaly)
}
}
